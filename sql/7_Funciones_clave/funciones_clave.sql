use mi_bd;

/*
	##########################
	Ejercicios Pr√°cticos con Tablas Temporales
	##########################
*/

-- Utiliza TABLE para consultar la tabla productos de manera simple, ordenando los productos de forma descendente por precio y solo 10 filas.
table productos
order by precio desc
limit 10;

-- Crea una tabla temporal de los empleados donde unifiques su nombre y apellido en una sola columna.

drop temporary table if exists nombre_apellido_e;
create temporary table nombre_apellido_e as
select concat(nombre, ' ', apellido) 'Nombre empleado'
from empleados;
-- table nombre_apellido_e;

-- Crea una tabla temporal de la tabla clientes donde solo tengas la columna nombre.
create temporary table nombre_clientes as
select nombre 'Nombre cliente'
from clientes;
-- table nombre_clientes;

-- Realiza la uni√≥n entre las tablas temporales de empleados y clientes usando TABLE.
table nombre_apellido_e union table nombre_clientes;

-- Crea una tabla temporal escuela primaria que tenga las siguientes columnas: id(int), nombre(varchar), apellido(varchar), edad(int) y grado(int). Y que tenga los siguientes valores:

	-- ID: 1, Nombre: Alejandro, Apellido: Gonz√°lez, Edad: 11, Grado: 5

	-- ID: 2, Nombre: Isabella, Apellido: L√≥pez, Edad: 10, Grado: 4

	-- ID: 3, Nombre: Lucas, Apellido: Mart√≠nez, Edad: 11, Grado: 5 

	-- ID: 4, Nombre: Sof√≠a, Apellido: Rodr√≠guez, Edad: 10, Grado: 4 

	-- ID: 5, Nombre: Mateo, Apellido: P√©rez, Edad: 12, Grado: 6 

	-- ID: 6, Nombre: Valentina, Apellido: Fern√°ndez, Edad: 12, Grado: 6

	-- ID: 7, Nombre: Diego, Apellido: Torres, Edad: 10, Grado: 4

	-- ID: 8, Nombre: Martina, Apellido: G√≥mez, Edad: 11, Grado: 5

	-- ID: 9, Nombre: Joaqu√≠n, Apellido: Hern√°ndez, Edad: 10, Grado: 4

	-- ID: 10, Nombre: Valeria, Apellido: D√≠az, Edad: 11, Grado: 5
    
create temporary table escuela_primaria (
	id int auto_increment primary key,
    nombre varchar(50),
    apellido varchar(50), 
    edad int,
    grado int
);

insert into escuela_primaria(nombre, apellido, edad, grado)
values 
	('Alejandro', 'Gonz√°lez', 11, 5),
    ('Isabella', 'Lopez', 10, 4),
    ('Lucas', 'Martinez', 11, 5),
    ('Sof√≠a', 'Rodr√≠guez', 10, 4),
    ('Mateo', 'Perez', 12, 6),
    ('Valentina', 'Fernandez', 12, 6),
    ('Diego', 'Torres', 10, 4),
    ('Martina', 'Gomez', 11, 5),
    ('Joaqu√≠n', 'Hernandez', 10, 4),
    ('Valeria', 'Diaz', 11, 5);

-- table escuela_primaria;
    
/*
	##########################
	Ejercicios Complementarios con Tablas Temporales 
	##########################
*/

-- Agrega un cliente nuevo con el nombre ‚ÄúAna Rodr√≠guez‚Äù y con direcci√≥n en ‚ÄúSan Mart√≠n 2515, Mar del Plata‚Äù. Luego realiza la intersecci√≥n entre la tabla temporal de empleados y clientes.
-- [üí° Debes volver a crear la tabla temporal de clientes para actualizar esa tabla].

-- Realiza la excepci√≥n entre la tabla temporal de clientes y la de empleados.

-- Crea una tabla temporal escuela secundaria que tenga las siguientes columnas: id(int), nombre(varchar), apellido(varchar), edad(int) y grado(int). Y que tenga los siguientes valores:

	-- ID: 1, Nombre: Eduardo, Apellido: S√°nchez, Edad: 16, Grado: 10

	-- ID: 2, Nombre: Camila, Apellido: Mart√≠n, Edad: 17, Grado: 11

	-- ID: 3, Nombre: Manuel, Apellido: Guti√©rrez, Edad: 15, Grado: 9

	-- ID: 4, Nombre: Laura, Apellido: Garc√≠a, Edad: 16, Grado: 10

	-- ID: 11, Nombre: Pablo, Apellido: Ortega, Edad: 17, Grado: 11

	-- ID: 12, Nombre: Carmen, Apellido: Ram√≠rez, Edad: 15, Grado: 9

	-- ID: 13, Nombre: Carlos, Apellido: Molina, Edad: 16, Grado: 10

	-- ID: 14, Nombre: Ana, Apellido: Ruiz, Edad: 17, Grado: 11

	-- ID: 15, Nombre: Luis, Apellido: Fern√°ndez, Edad: 15, Grado: 9

	-- ID: 16, Nombre: Mar√≠a, Apellido: L√≥pez, Edad: 16, Grado: 10

-- Realiza la intersecci√≥n de la escuela primaria y escuela secundaria con el nombre y apellido de los alumnos para saber quienes fueron a ambas escuelas.

-- Realiza la excepci√≥n de la escuela primaria con la secundaria para saber quienes no siguieron cursando en dicha escuela secundaria.

-- Realiza la excepci√≥n de la escuela secundaria con la primaria para saber quienes no siguieron cursando en dicha escuela secundaria.

-- Realiza la uni√≥n de la escuela primaria y secundaria con la columna grado para saber cu√°les son los grados que abarcan ambas escuelas, y ord√©nalos de forma descendente.

/*
	##########################
	Ejercicios  Subconsultas All y Any 
	##########################
*/

-- Encuentra los nombres de los clientes que han realizado compras de productos con un precio superior a la media de precios de todos los productos.
	
    /* FYI: Aggregate functions (AVG, SUM, MAX, etc) can't 
	be used directly in a WHERE clause. Try using the aggregate
    function in a subquery where it's allowed. */
select c.nombre 'Nombre de Cliente'
from clientes c
where c.id = any(
	select distinct v.cliente_id
    from ventas v
    where v.precio_unitario > (
		select avg(p.precio)
        from productos p
	)
);

	/* Alternative solution using joins.*/
select distinct c.nombre 'Nombre de Cliente'
from clientes c
left join ventas v
	on c.id = v.cliente_id
left join productos p
	on v.producto_id = p.id
    where v.precio_unitario > (
		select avg(p.precio)
        from productos p
	);

-- Encuentra los empleados cuyo salario sea mayor que al menos uno de los salarios de los empleados del departamento de "Ventas".
select concat_ws(' ', e.nombre, e.apellido) 'Empleado'
from empleados e
where e.salario > any(
	select e2.salario
    from empleados e2
    where e2.departamento_id = any(
		select d.id
        from departamentos d
        where d.nombre = 'Ventas'
    )
);

	/* Alternative solution using 'inner join'.*/
select concat_ws(' ', e.nombre, e.apellido) 'Cliente'
from empleados e
where e. salario > any(
	select e2.salario
    from empleados e2
    inner join departamentos d
		on e2.departamento_id = d.id
	where d.nombre = 'Ventas'
);

-- Encuentra los productos cuyos precios sean mayores que todos los precios de los productos con la palabra "M√≥vil" en su nombre.
select p.nombre 'Producto', p.precio 'Precio'
from productos p
where p.precio > all(
	select p2.precio
    from productos p2
    where p2.nombre like '%M√≥vil%'
);

-- Muestra la informaci√≥n de los clientes que realizaron la compra con el monto total m√°s alto, incluyendo su nombre, direcci√≥n y el monto total de compra.

	/* FYI: When data from 2 or more tables is asked to show, it's more 
    advisable to use joins instead of subqueries. */
select c.nombre 'Nombre', c.direccion 'Direcci√≥n', max(v.monto_total) 'Monto total de compra'
from clientes c, ventas v
where c.id = v.cliente_id and c.id = any(
	select v.cliente_id
    from ventas v
    where v.monto_total = (
		select max(v2.monto_total)
        from ventas v2
    ) 
)
group by c.nombre, c.direccion;

	/* Alternative solution using 'inner join'. This is the advisable 
	solution. */
SELECT c.nombre "Cliente", c.direccion "Direcci√≥n",
MAX(v.monto_total) "Monto Total de Compra"
FROM clientes c INNER JOIN ventas v ON c.id = v.cliente_id
GROUP BY c.id
ORDER BY MAX(v.monto_total) DESC
LIMIT 1;

-- Para cada departamento, encuentra el empleado con el salario m√°s alto. Muestra el nombre del departamento junto con el nombre del empleado y su salario

	/* Using the concept of Correlated Subquery which is a subquery that 
    references columns from the outer query. This pattern is common for 
    finding per-group max/min values. */
select d.nombre 'Departamento', concat_ws(' ', e.nombre, e.apellido) 'Empleado', e.salario 'Salario'
from departamentos d
inner join empleados e
	on d.id = e.departamento_id
where e.salario = (
	select max(e2.salario)
    from empleados e2
    where e2.departamento_id = d.id
);

/*
	##########################
	Ejercicios  Subconsultas All y Any
	##########################
*/

-- Encuentra los empleados que ganan m√°s que el salario promedio de los empleados del departamento de "Contabilidad".

-- Encuentra los productos que tienen un precio superior al precio de al menos uno de los productos vendidos al cliente con nombre "Juan P√©rez".

-- Encuentra los departamentos en los que al menos hay un empleado menor de 30 a√±os.

-- Muestra la informaci√≥n del empleado m√°s joven, que est√© entre los 3 empleados con m√°s cantidad de productos vendidos, incluyendo su nombre, apellido y edad.

-- Para cada cliente, encuentra el empleado que realiz√≥ la venta con el monto total m√°s alto. Muestra el nombre del cliente junto con el nombre del empleado y el monto total.

/*
	##########################
	Ejercicios Complementarios 
	##########################
*/

-- Encuentra los clientes que no han realizado ninguna compra. Muestra el nombre y la direcci√≥n de estos clientes.

-- Muestra el nombre de los productos que se han vendido m√°s veces que cualquier producto con un precio superior a 500.

-- Encuentra los empleados cuya edad sea menor que la edad de al menos un empleado del departamento de "Recursos Humanos".

-- Encuentra los productos cuyos precios sean menores o iguales a todos los precios de los productos con la palabra "C√°mara" en su nombre.

-- Muestra el nombre y el salario de los empleados con salarios superiores al promedio de salarios de todos los empleados.

-- Encuentra el nombre y el salario de los empleados con salarios inferiores al promedio de salarios de todos los empleados del departamento de "Ventas".

-- Encuentra los clientes que han realizado compras de productos con un precio_unitario inferior al precio promedio de todos los productos.

-- Encuentra los empleados que tienen un salario igual al salario de al menos un empleado del departamento de "Recursos Humanos".

-- Encuentra los productos cuyo precio es mayor o igual a todos los precios de los productos con la palabra "Refrigeradora" en su nombre.

-- Muestra el nombre, apellido y salario del empleado con el salario m√°s alto que est√© por debajo del promedio salarial de los empleados.